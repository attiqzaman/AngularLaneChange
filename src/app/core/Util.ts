import { Section } from "./Section";
import { Snapshot } from "./Snapshot";

var dsp = require('digitalsignals');

export function AreSnapshotsOnSamePoint(a:Snapshot, b: Snapshot, useGooglePoints: boolean) : boolean {
	// return useGooglePoints ?
	// 			a.GoogleLatitude == b.GoogleLatitude && a.GoogleLongitude == b.GoogleLongitude :
	// 			a.Latitude == b.Latitude && a.Longitude == b.Longitude;

	return a.GoogleLatitude == b.GoogleLatitude && a.GoogleLongitude == b.GoogleLongitude;
	// a.Latitude == b.Latitude && a.Longitude == b.Longitude;
}


export function CalculatePathAveragedValue(
	start: number,
	end: number,
	sourceData: number[],
	distances: number[],
	accumulativeDistances: number[]): number
{
	let sumOfDifferenceOfSourceParameter: number[] = []
	sumOfDifferenceOfSourceParameter.push(0);

	let pathAveragedValue: number = 0;
	for (let i = start; i <= end; i++)
	{
		let currentValue = sourceData[i] * distances[i];
		sumOfDifferenceOfSourceParameter.push(currentValue + sumOfDifferenceOfSourceParameter[i - 1]);

		// This could just calculate pathAverageValue at the end but for now I am trying to keep
		// things somewhat similar to original until we know the code has been translated successfully.
		let currentAccumulativeDistanceFromStart = accumulativeDistances[i] - accumulativeDistances[start - 1];
		pathAveragedValue = sumOfDifferenceOfSourceParameter[i] / currentAccumulativeDistanceFromStart;
	}

	return pathAveragedValue;
}

// Not exactly sure what dh1 represents but its used in calculation of straight sections.
export function GetDH1 (differentialHeadings: number[]): number[]
{
	let limit1 = 0.08;
	let limit2 = 0.07;
	let limit3 = 0.09;
	let dh1: number[] = differentialHeadings;

	// We are updating array while looping over it?
	for (let i = 1; i < differentialHeadings.length; i++)
	{
		if (dh1[i] > limit1 && dh1[i + 1] < limit1 && dh1[i - 1] < limit1 )
		{
			dh1[i] = limit1;
		}
		else if (dh1[i] < -limit1 && dh1[i + 1] > -limit1 && dh1[i - 1] > -limit1)
		{
			dh1[i] = -limit1;
		}
		else if (dh1[i] < limit1 && dh1[i + 1] > limit1 && dh1[i - 1] > limit1)
		{
			dh1[i] = limit3;
		}
		else if ((dh1[i] > -limit1 && dh1[i + 1] < -limit1 && dh1[i - 1] < -limit1))
		{
			dh1[i] = -limit3;
		}
		else if (dh1[i] > limit1 && dh1[i + 1] > limit1 && dh1[i + 2] > limit1 && dh1[i + 3] < limit1 && dh1[i - 1] < limit1 && dh1[i - 2] < limit1)
		{
			dh1[i] = limit2;
			dh1[i + 1] = limit2;
			dh1[i + 2] = limit2;
		}
		else if (dh1[i] > limit1 && dh1[i + 1] > limit1 && dh1[i + 2] < limit1 && dh1[i + 3] < limit1 && dh1[i - 1] < limit1)
		{
			dh1[i] = limit2;
			dh1[i + 1] = limit2;
		}
		else if (dh1[i] < -limit1 && dh1[i + 1] < -limit1 && dh1[i + 2] < -limit1 && dh1[i + 3] < -limit1 && dh1[i + 4] > -limit1 && dh1[i - 1] > -limit1 && dh1[i - 2] > -limit1)
		{
			dh1[i] = -limit2;
			dh1[i + 1] = -limit2;
			dh1[i + 2] = -limit2;
		}
		//for N2_RL
		else if (dh1[i] < limit1 && dh1[i - 1] > limit1 && dh1[i - 2] > limit1 && dh1[i - 3] > limit1 && dh1[i - 4] > limit1 && dh1[i - 5] > limit1 && dh1[i - 6] > limit1 && dh1[i - 7] > limit1 && dh1[i - 8] < limit1 && dh1[i + 1] < limit1)
		{
			dh1[i - 1] = limit2;
			dh1[i - 2] = limit2;
			dh1[i - 3] = limit2;
			dh1[i - 4] = limit2;
		}
		else
		{
			dh1[i] = dh1[i]; // hopefully just an oversight.
		}
	}

	return dh1;
}

// This returns a dictionary where each kvp represent a straight section, values are indices of the differential heading array. 
export function GetStraightSections(dh1: number[]): {}
{
	let sections: Section[] = [];
	// let sections: { [startPoint: string]: number } = {};
	// let startSections: number[];
	// let endSections: number[];

	// We don't know if we started in a curve (meaning we will hit start point of a section first) or we
	// already started in a straight section (meaning we will first hit end of straight section) so we need to
	// first determine that, we will loop through the differential headings looking for both start and end of straight section, 
	// depending on what we find first we will process the rest of the array accordingly.
	let i = 6;
	let startIndex: number;
	let endIndex: number;
	while (i < dh1.length)
	{
		if (IsStartOfStraightSection(i, dh1))
		{
			// We started in a curver.
			startIndex = i;
			endIndex = FindEndOfStraightSection(i, dh1);
			sections.push(CreateStraightSection(startIndex, endIndex));
			// endSections.push(endIndex);
			// sections.Add(startIndex, endIndex);
			i = endIndex; // should this be endIndex + 1?
		}
		else if (IsEndOfStraightSection(i, dh1))
		{
			// We started in a straight section, so assume start of straight section was the first data point.
			startIndex = 0;
			endIndex = i;
			sections.push(CreateStraightSection(startIndex, endIndex));
			// startSections.push(startIndex);
			// endSections.push(endIndex);
			i = endIndex; // should this be endIndex + 1?
		}
		else
		{
			i++;
		}
	}

	if (sections.length > 0)
	{
		while (i < dh1.length)
		{
			startIndex = FindStartOfStraightSection(i, dh1);
			if (startIndex != -1)
			{
				endIndex = FindEndOfStraightSection(i, dh1);
				sections.push(CreateStraightSection(startIndex, endIndex));
				// startSections.push(startIndex);
				// endSections.push(endIndex);
				i = endIndex; // should this be endIndex + 1?
			}
		}

	}
	else
	{
		// we just were in a curve throughout the route.
		// TODO: Handle the curve
	}

	return sections;
}

export function ConvertLatLngToSnapshots(points: google.maps.LatLng[]): Snapshot[] {
	let allSnapshots: Snapshot[] = [];
	points.forEach(point => {
		allSnapshots.push(new Snapshot(point.lat(), point.lng()));
	});


	return allSnapshots;
}

export function ApplySmoothingfilter(input: number[], cutOffFrequency1: number, cutOffFrequency2: number): number[] {
	console.log(`input: ${input}`);
	
	var clonedInput  = [...input];

	const fs = 4096;
	for (let i = clonedInput.length + 1; i <= fs; i++) {
		clonedInput.push(0);       
	}

	var fft = new dsp.FFT(fs, fs); 
	fft.forward(clonedInput);
	var fftReal = fft.real;
	var fftImag = fft.imag;

	for (let i = cutOffFrequency2; i <= fs/2; i++) {
		fftReal[i] = 0;
		fftReal[fs - i + 1] = 0;

		fftImag[i] = 0;
		fftImag[fs - i + 1] = 0;
	}

	for (let i = cutOffFrequency1; i <= cutOffFrequency2 - 1; i++) {
		var f_f = (cutOffFrequency2-1-i)/(cutOffFrequency2-cutOffFrequency1+1);
		fftReal[i] = fftReal[i]*f_f;
		fftImag[i] = fftImag[i]*f_f;

		fftReal[fs-i+1] = fftReal[fs-i+1]*f_f;		
		fftImag[fs-i+1] = fftImag[fs-i+1]*f_f;
	}

	var smoothedData = fft.inverse(fftReal, fftImag);
	for (let index = 0; index < smoothedData.length; index++) {
		smoothedData[index] = Math.abs(smoothedData[index]);
	}

	return smoothedData;
}

function FindStartOfStraightSection(start: number, dh1: number[])
{
	for (let i = start; i < dh1.length - 6; i++)
	{
		if (IsStartOfStraightSection(i, dh1))
		{
			return i;
		}
	}

	return -1;
}

function FindEndOfStraightSection(start: number, dh1: number[])
{
	for (let i = start; i < dh1.length - 6; i++)
	{
		if (IsEndOfStraightSection(i, dh1))
		{
			return i;
		}
	}

	return dh1.length - 1;
}

function IsStartOfStraightSection(index: number, dh1: number[]): boolean
{
	var limit1 = 0.08;
	// This kind of things can be made simpler/faster by applying a matrix filter
	if ((Math.abs(dh1[index - 6]) > limit1) && (Math.abs(dh1[index - 5]) > limit1) && (Math.abs(dh1[index - 4]) > limit1) &&
		(Math.abs(dh1[index - 3]) > limit1) && (Math.abs(dh1[index - 2]) > limit1) && (Math.abs(dh1[index - 1]) > limit1) &&
		(Math.abs(dh1[index]) <= limit1) &&
		(Math.abs(dh1[index + 1]) <= limit1) && (Math.abs(dh1[index + 2]) <= limit1) &&
		(Math.abs(dh1[index + 3]) <= limit1) && (Math.abs(dh1[index + 4]) <= limit1) && (Math.abs(dh1[index + 5]) <= limit1) &&
		(Math.abs(dh1[index + 6]) <= limit1))

	{
		return true;
	}

	return false;
}

function IsEndOfStraightSection(index: number, dh1: number[]): boolean
{
	var limit1 = 0.08;
	// This kind of things can be made simpler/faster by applying a matrix filter
	if ((Math.abs(dh1[index - 6]) <= limit1) && (Math.abs(dh1[index - 5]) <= limit1) && (Math.abs(dh1[index - 4]) <= limit1) && (Math.abs(dh1[index - 3]) <= limit1) &&
			(Math.abs(dh1[index - 2]) <= limit1) && (Math.abs(dh1[index - 1]) <= limit1) &&
			(Math.abs(dh1[index]) >= limit1) && (Math.abs(dh1[index + 1]) > limit1) && (Math.abs(dh1[index + 2]) > limit1) &&
			(Math.abs(dh1[index + 3]) > limit1) && (Math.abs(dh1[index + 4]) > limit1) && (Math.abs(dh1[index + 5]) > limit1) && (Math.abs(dh1[index + 6]) > limit1))

	{
		return true;
	}

	return false;
}

function CreateStraightSection(startIndex: number, endIndex: number): Section
{
	return new Section(startIndex, endIndex, "Straight");
}


export function getTestHeading(): number[] {
	let test = [77.96695442,77.96695322,77.96695199,77.96695083,77.96694958,77.96694834,77.96694715,77.96694591,77.9669447,77.9669435,77.96694227,77.9669411,77.96693983,77.96693862,77.9669374,77.96693619,77.96693499,77.96693374,77.96693256,77.96693133,77.96693011,77.9669289,77.96692768,77.96692646,77.96692525,77.96692409,77.96692282,77.96692158,77.96692039,77.96691917,77.96691796,77.96691674,77.96691553,77.96691435,77.96691309,77.96691188,77.96691066,77.96690943,77.96690823,77.966907,77.9669058,77.96690459,77.96690335,77.96690214,77.96690094,77.96689972,77.96689849,77.96689735,77.96689606,77.96689484,77.96689365,77.96689241,77.9668912,77.96689,77.96688877,77.96688761,77.96688634,77.96688514,77.96688391,77.96688269,77.96688149,77.96688026,77.96687904,77.96687783,77.96687661,77.9668754,77.96687418,77.96687298,77.96687175,77.96687059,77.96686932,77.9668681,77.96686689,77.96686567,77.96686443,78.23263283,78.23263167,78.23263051,78.23262938,78.23262817,78.23262702,78.23262584,78.23262468,78.23262352,78.23262186,76.69578307,76.69578161,76.69578011,76.69577866,76.69577717,76.6957757,76.69577422,76.69577276,76.6957708,78.02477879,78.02477765,78.02477638,78.02477518,78.02477397,78.02477277,78.02477161,78.02477035,78.02476916,78.024768,78.02476674,78.02476555,78.02476435,78.02476311,78.02476199,78.02476072,78.02475952,78.02475836,78.02475711,78.02475591,78.0247547,78.02475348,78.02475235,78.02475108,78.02474989,78.02474873,78.02474746,78.02474582,76.93898789,76.93898647,76.93898509,76.93898363,76.93898218,76.93898083,76.93897935,76.93897792,76.93897649,76.9389751,76.93897338,79.48597164,79.48597071,79.48596976,79.48596883,79.4859679,79.48596697,79.485966,79.48596515,79.48596409,79.48596327,79.48596223,79.48596141,79.48596041,79.48595948,79.48595853,79.4859576,79.48595665,79.48595574,79.48595479,79.48595384,79.48595296,79.48595192,79.48595109,79.48595012,79.48594915,79.48594824,79.48594729,79.48594605,77.78641364,77.78641239,77.78641109,77.78640986,77.78640864,77.78640739,77.7864061,77.78640489,77.78640358,77.7864024,77.78640108,77.78639988,77.78639858,77.78639738,77.78639608,77.78639488,77.78639361,77.78639232,77.78639107,77.78638988,77.78638863,77.78638732,77.78638607,77.78638487,77.78638362,77.78638232,77.7863811,77.78637982,77.78637862,77.78637731,77.78637612,77.78637481,77.78637337,77.67471266,77.67471147,77.67471018,77.67470887,77.67470759,77.67470637,77.6747051,77.67470376,77.6747025,77.67470126,77.67469996,77.67469873,77.6746974,77.67469619,77.67469485,77.67469365,77.67469229,77.67469104,77.67468981,77.67468854,77.67468722,77.67468595,77.67468474,77.6746834,77.67468218,77.67468084,77.67467963,77.6746783,77.67467709,77.67467577,77.67467453,77.67467321,77.674672,77.67467066,77.67466939,77.67466817,77.67466691,77.67466556,77.6746643,77.67466308,77.67466174,77.67466053,77.6746592,77.67465799,77.67465667,77.67465544,77.67465411,77.67465284,77.67465163,77.67465034,77.67464902,77.67464775,77.67464652,77.67464525,77.67464393,77.67464264,77.67464145,77.67464011,77.67463887,77.67463757,77.67463634,77.67463501,77.6746338,77.67463246,77.67463119,77.67462998,77.67462869,77.67462737,77.67462612,77.67462487,77.67462356,77.67462235,77.67462101,77.67461979,77.67461845,77.67461724,77.67461591,77.6746147,77.67461278,77.11557107,77.1155697,77.11556833,77.11556699,77.11556554,77.1155642,77.11556276,77.11556138,77.11555999,77.11555865,77.11555722,77.1155559,77.11555417,77.61358099,77.6135797,77.61357836,77.61357713,77.61357584,77.61357456,77.61357322,77.61357198,77.6135707,77.61356943,77.61356812,77.61356678,77.61356555,77.61356428,77.61356298,77.61356164,77.61356043,77.61355914,77.61355783,77.61355657,77.61355528,77.61355394,77.61355271,77.61355142,77.61355008,77.61354885,77.61354754,77.61354628,77.61354499,77.6135437,77.61354236,77.61354113,77.61353986,77.6135385,77.61353727,77.613536,77.61353472,77.61353341,77.61353213,77.6135308,77.61352955,77.61352829,77.61352685,76.86665398,76.86665249,76.86665111,76.86664967,76.86664824,76.8666464,90,76.33953789,76.3395363,76.33953484,76.3395332,76.33953171,76.33952993,77.84287809,77.84287682,77.84287563,77.84287432,77.84287309,77.84287191,77.84287062,77.84286937,77.84286817,77.84286689,77.84286564,77.84286447,77.84286317,77.84286194,77.84286074,77.84285945,77.8428582,77.84285702,77.84285573,77.8428545,77.84285329,77.84285147,76.91254866,76.9125472,76.91254576,76.91254433,76.9125429,76.91254147,76.91254005,76.91253862,76.91253719,76.91253582,76.91253434,76.91253289,76.91253148,76.91253006,76.91252867,76.91252718,76.91252576,76.91252429,73.10095395,73.10095157,73.10094926,73.10094699,73.10094463,73.10094189,74.70768982,74.70768789,74.70768598,74.7076838,64.07613241,72.04460317,72.04460059,72.04459802,72.04459541,72.04459278,72.04459029,72.04458741,69.96980972,69.96980662,69.96980343,69.96980031,69.96979712,69.96979395,69.9697908,69.96978771,69.96978339,66.95854522,66.95854123,66.95853715,66.95853317,66.95852909,66.95852505,66.95852109,66.95851704,66.95851295,66.95850894,66.95850496,66.95850086,66.95849689,66.95849281,66.95848881,66.95848473,66.95848072,66.95847671,66.95847263,66.95846866,66.95846458,66.9584606,66.95845652,66.95845253,66.95844845,66.9584433,53.90274296,62.76572416,62.76571878,62.76571344,62.76570818,62.7657028,62.76569747,62.7656922,62.76568682,62.76568149,62.76567622,62.76567086,62.76566551,62.76566024,62.76565488,62.76564953,62.76564427,62.76563888,62.76563357,62.76562703,61.00704009,61.0070342,61.00702839,61.00702251,61.00701657,61.00701071,61.00700487,61.00699895,61.00699311,61.0069872,61.00698136,61.00697543,61.0069696,61.00696213,58.89193559,58.89192908,58.89192253,58.89191595,58.89190952,58.89190288,58.89189639,58.89188783,58.32664126,58.32663456,58.32662784,58.32662113,58.32661441,58.32660771,58.32659843,52.97306288,52.9730546,52.97304626,52.97303803,52.97302975,52.97302148,52.97301318,52.97300491,52.97299561,53.90232466,53.90231668,53.90230861,53.90230059,53.90229257,53.90228454,53.90227652,53.9022685,53.90226051,53.90225245,53.90224443,53.9022364,53.90222837,53.90222037,53.90221235,53.90220283,52.45528585,52.45527748,52.45526905,52.45526063,52.4552522,52.45524379,52.45523536,52.45522695,52.45521852,52.4552101,52.45520163,52.45519326,52.45518483,52.45517641,52.455168,52.45515955,52.4551511,52.45514272,52.4551343,52.45512588,52.45511745,52.45510902,52.4550973,50.9864088,50.98639998,50.98639122,50.98638236,50.98637361,50.98636475,50.98635594,50.98634716,50.98633833,50.98632957,50.9863207,50.9863119,50.98630314,50.98629101,53.90186992,53.90185976,52.3880322,52.38802374,52.38801532,52.38800684,52.38799841,52.38799002,52.38798151,52.38797312,52.38796465,52.38795621,52.38794781,52.38793936,52.38793088,52.38792243,52.38791404,52.38790557,52.38789692,51.24777098,51.24776223,51.24775348,51.24774475,51.24773597,51.24772732,51.24771848,51.24770979,51.24770104,51.24769231,51.24768355,51.24767483,51.24766608,51.24765734,51.2476486,51.24763985,51.24763112,51.24762236,51.24761363,51.24760485,51.2475962,51.24758736,51.24757867,51.24756992,51.24756118,51.24755243,51.24754369,51.24753497,51.24752622,51.24751747,51.24750874,51.2475,51.2474912,51.24748256,51.24747373,51.24746507,51.24745625,51.24744755,51.24743882,51.24743007,51.24742131,51.2474124,50.3849719,50.38496288,50.38495397,50.38494497,50.38493602,50.38492709,50.38491813,50.38490913,50.38490017,50.38489124,50.3848823,50.38487222,53.08335382,53.08334553,53.08333733,53.08332902,53.08332082,53.08331251,53.08330431,53.08329606,53.08328776,53.08327956,53.0832713,53.08326301,53.08325481,53.08324655,53.08323826,53.08323005,53.0832218,53.0832135,53.08320528,53.08319704,53.08318892,56.63039209,56.63038489,56.63037767,56.63037039,56.63036322,56.63035598,56.63034875,56.63034153,56.63033264,57.58048023,57.58047334,57.58046634,57.58045946,57.58045247,57.58044558,57.58043863,57.58043165,57.58042476,57.58041776,57.58041087,57.58040389,57.58039699,57.58039005,57.58038305,57.58037618,57.58036918,57.5803599,57.46046508,57.46045815,57.46045118,57.46044128,60.44034425,60.44033818,60.44033213,60.44032603,60.4403192,64.07433739,64.07433252,64.07432755,64.07432263,64.0743177,64.07431278,64.07430793,64.07430296,64.0742972,57.04984745,57.04983772,64.07427483,64.07426982,64.07426494,64.07426003,64.07425281,64.07424592,65.7052951,65.7052907,65.70528629,65.70528191,65.70527747,65.70527305,65.70526862,65.70526421,65.70525985,65.70525539,65.70524943,68.56283977,68.56283627,68.56283271,68.5628291,68.56282554,68.56282204,68.5628182,68.31011391,68.31011022,68.31010665,68.31010301,68.31009938,68.31009571,68.31009212,68.31008849,68.3100848,68.31008123,68.31007759,68.31007384,71.15383844,71.15383567,71.15383277,71.15383002,71.15382719,71.15382433,71.15382154,71.15381871,71.15381584,71.15381306,71.1538102,71.15380652,74.33323094,74.33322893,74.33322698,74.33322485,74.33322296,74.33322004,69.96812224,69.96811914,69.96811593,69.96811235,71.39910875,71.39910601,71.39910258,74.47517697,74.47517494,74.47517303,74.47517099,74.47516902,74.47516704,74.47516513,74.47516309,74.47516118,74.47515914,74.475157,78.23114296,78.23114175,78.23114064,78.23113948,78.23113826,78.23113715,78.23113597,78.23113477,78.23113358,76.86533624,76.8653348,76.86533337,76.86533192,76.8653305,76.86532867,81.18088536,81.1808847,81.18088404,81.18088343,81.18088272,81.18088206,81.18088142,81.18088072,81.18088004,81.18087944,81.18087872,81.18087798,82.44761859,82.44761816,82.44761767,82.44761717,82.44761667,82.44761614,82.44761572,82.4476151,83.67937863,83.67937824,83.67937795,83.67937754,83.67937725,83.67937686,83.67937656,83.67937621,83.67937583,83.67937548,83.6793752,83.67937485,83.67937445,83.67937409,83.6793738,83.67937347,83.67937306,83.67937277,83.67937238,83.67937198,87.12101691,87.12101678,87.12101676,87.12101671,87.12101656,87.12101654,87.12101648,88.29517958,88.29517956,88.29517947,88.2951795,88.29517947,88.29517947,88.29517937,88.29517939,88.29517937,88.29517936,88.29517932,88.2951793,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,87.80210822,87.80210818,87.80210818,87.80210809,87.80210811,87.802108,87.80210796,87.80210798,87.80210787,90,90,84.44672847,84.44672825,84.44672786,83.90883866,83.90883838,83.90883801,83.9088377,83.90883737,83.90883705,83.90883678,83.90883641,83.90883609,83.90883573,83.75774381,83.75774348,83.7577432,83.75774285,83.75774247,83.75774219,83.75774178,83.75774151,83.75774114,83.75774082,80.53715968,80.53715891,80.53715816,80.53715734,80.53715663,80.53715588,80.53715505,80.53715436,80.53715351,90,79.66832393,79.66832299,75.88553526,75.8855336,75.88553198,75.88553031,75.88552864,75.88552705,75.88552487,77.35387425,77.35387295,77.35387161,77.35387022,77.35386895,77.35386759,77.3538662,77.35386493,77.35386354,77.35386224,77.35386092,77.3538595,77.3538578,73.34476339,73.34476113,73.34475893,73.34475658,73.34475443,73.34475212,73.34474987,73.34474763,73.34474537,73.34474268,72.40887532,72.40887286,72.4088703,72.40886783,72.40886537,72.40886289,72.40886035,72.40885785,72.40885542,72.40885292,72.40885036,72.40884759,64.07369078,69.96783188,69.96782876,69.96782556,69.96782246,69.96781925,69.96781612,69.967813,69.96780984,69.96780665,69.96780214,66.62954056,66.62953644,66.62953231,66.62952817,66.62952403,66.62951991,66.6295148,69.00333459,69.00333119,69.00332778,69.0033243,69.0033206,62.86841381,62.86840846,62.86840322,62.86839787,62.86839257,62.86838732,62.86838199,62.86837669,62.86837144,62.86836455,63.52660265,63.52659756,63.52659253,63.5265874,63.5265823,63.5265772,63.52657211,63.52656708,63.52656193,63.52655685,63.5265501,59.74176813,59.74176187,59.74175556,59.74174931,59.74174304,59.74173678,59.74173045,59.74172422,59.74171796,59.74171162,59.7417054,59.74169912,59.74169284,59.74168653,59.7416803,59.74167344,60.0708938,60.07088773,60.07088151,60.07087533,60.07086915,60.07086299,60.07085682,60.07085065,60.07084447,60.07083829,60.07083168,59.74159716,59.74159089,59.74158462,59.74157834,59.74157208,59.7415658,59.74155952,59.74155324,59.74154696,59.74154068,59.74153442,59.74152814,59.74152186,59.7415156,59.74150932,59.74150243,59.74149549,59.74148927,59.74148294,59.74147666,59.7414704,59.74146412,59.74145791,59.74145156,59.7414453,59.74143907,59.74143274,59.74142646,59.74142023,59.74141392,59.74140764,59.74140141,59.74139509,59.74138882,59.74138254,59.7413744,59.74136614,59.74135986,59.74135358,59.7413473,59.74134099,59.74133481,59.74132843,59.7413222,59.74131594,59.74130966,59.7413034,59.74129707,59.74129084,59.74128456,59.74127828,59.74127134,58.99511516,58.99510871,58.99510216,58.99509571,58.99508914,58.99508267,58.99507612,58.99506962,58.99506317,58.99505665,58.9950501,58.99504359,58.99503713,58.99503063,58.99502407,58.99501756,58.99501111,58.99500455,58.99499809,58.99499154,58.99498506,58.99497852,58.99497205,58.99496551,58.99495899,58.99495254,58.99494603,58.99493948,58.99493298,58.9949265,58.99492001,58.99491343,58.99490695,58.99490048,58.99489393,58.99488747,58.99488093,58.99487446,58.99486791,58.99486142,58.99485489,58.99484839,58.99484192,58.99483542,58.99482885,58.99482235,58.9948159,58.99480938,58.99480283,58.99479631,58.99478986,58.99478329,58.99477686,58.99477029,58.99476384,58.99475727,58.99475082,58.99474427,58.99473783,62.48547743,62.48547197,62.48546656,62.48546115,59.40501394,59.40500756,59.40500124,59.4049948,59.40498842,59.40498205,59.40497566,59.40496933,59.40496291,59.40495353,59.38582264,59.38581626,59.38580989,59.38580354,59.38579706,59.38579076,59.38578434,59.38577794,59.38577156,59.38576519,59.38575879,59.3857524,59.38574607,59.38573959,59.3857333,59.38572685,59.38572048,59.38571408,59.3857077,59.38570132,59.38569493,59.38568855,59.38568215,59.38567581,59.38566933,59.38566304,59.38565661,59.38565023,59.38564384,59.38563746,59.38563106,59.38562469,59.38561829,59.38561191,59.38560555,59.38559914,59.38559274,59.38558637,59.38557997,59.38557359,59.3855672,59.38556082,59.38555443,59.3855481,59.3855416,59.38553533,59.38552888,59.3855225,59.38551611,59.38550973,59.38550099,58.85787716,58.85787061,58.85786407,58.85785756,58.85785097,58.85784442,58.85783791,58.85783132,58.85782477,58.85781821,58.8578117,58.85780512,58.85779861,58.85779202,58.85778547,58.85777891,58.85777242,58.85776582,58.85775933,58.85775005,60.85288985,60.85288385,60.85287793,60.852872,60.85286609,60.85286019,60.85285418,60.85284833,60.8528397,58.54838133,58.5483747,58.54836806,58.54836144,58.54835475,58.54834811,58.54834146,58.54833482,58.54832735,59.58838118,59.5883749,59.58836856,59.5883622,59.58835593,59.58834956,59.58834328,59.58833691,59.58833064,59.58832426,59.58831799,59.58831163,59.58830534,59.58829896,59.58829271,59.58828633,59.58828004,59.58827368,59.58826739,59.58826104,59.58825476,59.58824839,59.58824211,59.5882351,59.25031272,59.25030631,59.25029986,59.2502935,59.25028701,59.25028059,59.25027415,59.25026773,59.25026129,59.25025493,59.25024844,59.25024202,59.25023558,59.25022916,59.25022272,59.2502163,59.25020987,59.25020345,59.25019704,59.25019059,59.25018415,59.2501761,59.73991361,57.99084026,57.99083349,57.99082663,57.99081913,60.03072093,60.03071472,60.03070854,60.03070237,60.03069617,60.03068998,60.0306838,60.03067761,60.03067143,60.03066523,60.03065906,60.03065292,60.03064664,60.03064055,60.03063427,60.03062818,60.03062195,60.03061575,60.03060958,60.03060339,60.03059719,60.03059102,60.03058482,60.03057864,60.03057159,60.28486441,60.28485835,60.2848522,60.28484615,60.28483999,60.28483167,69.96611644,57.30900285,57.30899578,57.3089888,57.30898176,57.30897475,57.30896768,57.30895873,60.118941,60.11893484,60.11892864,60.11892253,60.1189163,60.11891021,60.11890405,60.11889784,60.11888956,59.06105633,59.06104991,59.06104335,59.06103688,59.06103039,59.0610239,59.06101741,59.06101094,59.0610045,59.06099796,59.06099147,59.06098498,59.06097849,59.060972,59.06096553,59.06095904,59.06095253,59.06094606,59.06093957,59.06093308,59.06092449,59.49231111,59.49230472,59.49229838,59.49229202,59.49228566,59.4922793,59.49227294,59.4922666,59.49226024,59.4922539,59.49224754,59.49224118,59.49223484,59.49222848,59.49222212,59.49221582,59.4922094,59.49220306,59.4921967,59.49219036,59.492184,59.49217766,59.4921713,59.49216494,59.49215864,59.49215222,59.49214588,59.49213952,59.49213316,59.49212682,59.49212048,59.4921141,59.49210776,59.4921014,59.49209504,59.49208868,59.49208234,59.49207598,59.49206967,59.49206328,59.49205692,59.49205058,59.49204422,59.49203602,61.32257888,61.32257304,61.32256732,61.32256149,61.32255575,61.32254715,58.44404435,58.44403762,58.44403095,58.44402433,58.44401763,58.44401092,58.44400423,58.44399761,58.44399093,58.44398421,58.44397634,59.44302933,59.44302291,59.44301659,59.44301017,59.44300386,59.44299748,59.44299107,59.44298473,59.44297833,59.44297201,59.44296563,59.44295922,59.44295289,59.44294654,59.44294012,59.44293379,59.44292742,59.442921,59.44291468,59.44290831,59.4429019,59.44289556,59.44288919,59.44288279,59.44287647,59.44287005,59.44286372,59.4428573,59.44285098,59.44284463,59.44283819,59.44283188,59.44282551,59.44281909,59.44281278,59.4428064,59.44279999,59.44279367,59.4427873,59.44278088,59.44277456,59.4427682,59.44276177,59.44275546,59.44274909,59.44274267,59.44273634,59.44272992,59.44272143,58.44364656,58.44363992,58.44363319,58.44362652,58.4436176,58.76770351,58.76769693,58.76769035,58.76768377,58.76767719,58.76767066,58.76766398,58.76765749,58.76765087,58.7676443,58.76763771,58.76763114,58.76762456,58.76761798,58.7676114,58.76760482,58.76759829,58.76759163,58.76758513,58.7675785,58.76757194,58.76756534,58.76755878,58.76755218,58.76754561,58.76753741,58.44343347,58.44342679,58.4434201,58.44341342,58.44340675,58.44340007,58.44339338,58.44338672,58.44338003,58.44337335,58.44336559,58.50727924,58.50727257,58.50726597,58.50725925,58.5072526,58.507246,58.50723927,58.50723263,58.50722602,58.5072193,58.50721266,58.50720603,58.50719933,58.50718958,58.32057783,58.32057109,58.3205644,58.32055768,58.32055095,58.32054425,58.32053493,56.45486015,56.45485285,56.45484557,56.45483829,56.45483101,56.45482367,56.45481649,56.45480911,56.45480188,56.45479437,56.05072012,56.05071274,56.05070528,56.05069788,56.05069051,56.05068307,56.05067207,56.77905793,56.77905073,56.77904356,56.77903636,56.77902918,56.77902198,56.77901482,56.77900762,56.77900044,56.77899325,56.77898607,56.77897889,56.77897169,56.77896127,57.58673561,57.58672862,57.58672169,57.58671474,57.5867078,57.5867009,57.58669392,57.58668698,57.58668008,57.5866731,57.58666615,57.58665921,57.58665231,57.58664531,57.58663839,57.58663149,57.58662449,57.58661756,57.58661062,57.58660369,57.58659679,57.58658979,57.58658285,57.58657597,57.58656664,57.98875459,57.98874773,57.98874096,57.9887341,57.98872728,57.98872045,57.98871369,57.98870682,57.98870004,57.98869319,57.98868637,57.98867954,57.98867278,57.98866591,57.98865913,57.98865228,57.98864545,57.98863864,57.98863187,57.988625,57.9886183,58.59144833,58.59144169,58.59143502,58.59142843,58.5914218,58.59141512,58.59140854,58.59140185,58.59139526,58.59138863,58.591382,58.59137531,58.59136874,58.59136204,58.59135548,58.59134883,58.59134215,58.59133557,58.59132887,58.59132229,58.59131566,58.59130903,58.59130235,58.59129575,58.59128696,59.73758096,59.73757468,59.73756839,59.73756208,59.73755585,59.73754957,59.73754324,59.73753701,59.73753074,59.73752441,59.73751818,59.73751188,59.73750483,61.00033298,61.00032704,61.00032122,61.00031528,61.0003094,61.00030356,61.00029769,61.00029175,61.00028586,61.00028004,61.00027409,61.00026827,61.00026233,61.00025486,59.00935697,59.00935047,59.00934395,59.00933745,59.00933076,62.27107581,62.27107036,62.27106483,62.27105941,62.27105391,62.2710484,62.27104295,62.27103742,62.27103197,62.2710265,62.27102095,62.27101554,62.27100999,62.27100456,62.27099908,62.27099358,62.27098806,62.27098263,62.27097708,62.27097165,62.27096617,62.27096064,62.27095519,62.27094967,62.27094422,62.27093874,62.27093321,62.27092776,62.27092225,62.27091681,62.2709087,63.81671869,63.81671372,63.81670871,63.8167037,63.81669869,63.8166937,63.81668871,63.8166837,63.81667874,63.8166737,63.81666871,63.8166637,63.8166587,63.8166537,63.81664874,63.8166437,63.8166387,63.8166337,63.81662869,63.81662369,63.8166187,63.81661369,63.8166087,63.81660369,63.81659803,63.47925651,63.4792514,63.47924626,63.47924113,63.47923609,63.47923099,63.47922583,63.47922072,63.47921566,63.47920845,66.36508034,66.36507608,66.36507192,66.3650677,66.36506231,64.6812583,64.68125353,64.68124885,64.68124412,64.68123938,64.6812346,64.68122993,64.6812252,64.68122046,64.68121474,66.15279427,66.15279005,66.1527857,66.15278143,66.15277721,66.15277287,66.15276859,66.15276437,66.1527597,66.95211645,66.95211242,66.95210839,66.95210435,66.95210032,66.95209628,66.95209223,66.95208821,66.95208416,66.95208014,66.95207611,66.95207205,66.95206802,66.95206398,66.95205995,66.95205591,66.95205188,66.95204784,66.95204197,67.21202038,67.21201643,67.21201248,67.21200847,67.21200455,67.2120006,67.21199659,67.21199269,67.21198872,67.21198477,67.21198076,67.21197686,67.21197284,67.21196893,67.21196498,67.21196103,67.21195705,67.21195306,67.21194915,67.21194513,67.21194123,67.21193727,67.2119333,67.21192928,67.2119254,67.21192144,67.21191742,67.21191351,67.21190956,67.21190559,67.21190159,67.21189768,67.21189368,67.21188976,67.21188579,67.21188185,67.21187785,67.21187393,67.21186997,67.21186595,67.21186205,67.21185808,67.21185414,67.21185014,67.2118462,67.2118422,67.21183831,67.21183434,67.21183039,67.21182636,67.21182246,67.21181851,67.21181451,67.21181058,67.21180663,67.21180266,67.21179866,67.21179475,67.21179075,67.21178683,67.21178287,67.21177894,67.21177492,67.211771,67.21176702,67.21176304,67.21175914,67.21175303,67.50002664,67.50002284,67.50001892,67.50001508,67.50001116,67.50000734,67.50000341,67.49999961,67.49999567,67.49999185,67.49998793,67.49998411,67.49998018,67.49997635,67.49997244,67.49996862,67.4999647,67.49996086,67.49995694,67.49995307,67.49994926,67.49994484,69.28357738,69.28357396,69.28357062,69.28356727,69.28356392,69.28356061,69.28355663,68.55794837,68.5579448,68.55794124,68.55793769,68.55793412,68.55793058,68.55792681,67.49988776,67.49988389,67.49988,67.49987615,67.49987227,67.49986839,67.49986451,67.49986066,67.49985677,67.49985292,67.49984903,67.49984516,67.49984123,67.49983747,67.49983349,67.49982972,67.49982573,67.49982198,67.49981801,67.49981417,67.49981031,67.49980573,69.49205855,69.4920553,69.49205202,69.49204867,69.49204544,69.49204214,69.4920388,69.49203556,69.49203227,69.49202897,69.49202569,69.49202236,69.49201911,69.49201581,69.49201249,69.49200923,69.49200595,69.49200261,69.49199936,69.49199607,69.49199238,66.36429629,66.36429044,70.70457262,70.70456968,70.70456672,70.70456376,70.70456082,70.70455679,69.6162141,69.61621081,69.61620758,69.61620435,69.61620108,69.61619781,69.61619458,69.61619131,69.61618806,69.61618481,69.61618154,69.61617831,69.61617504,69.61617177,69.61616854,69.61616522,69.61616202,69.61615876,69.61615552,69.61615226,69.61614901,69.61614574,69.61614249,69.61613919,69.61613599,69.61613272,69.61612947,69.61612504,69.96332062,69.96331752,69.96331437,69.96331117,69.96330805,69.96330484,69.96330176,69.96329857,69.96329544,69.96329088,70.14979607,70.14979295,70.14978981,70.1497867,70.14978365,70.14978049,70.14977742,70.14977429,70.14977123,70.14976808,70.14976503,70.14976187,70.14975882,70.14975566,70.14975259,70.14974945,70.14974636,70.1497433,70.14974019,70.14973702,70.14973395,70.14973088,70.14972777,70.14972462,70.14972151,70.14971846,70.1497153,70.14971225,70.1497091,70.14970604,70.14970289,70.14969984,70.14969668,70.14969364,70.14969047,70.14968742,70.14968426,70.14968116,70.14967811,70.149675,70.14967184,70.14966874,70.14966569,70.14966258,70.14965943,70.14965632,70.14965327,70.14965017,70.14964699,70.14964392,70.14964085,70.1496377,70.14963393,71.05539767,71.05539476,71.05539195,71.05538824,67.3736438,70.70424799,70.70424505,70.70424214,70.70423913,70.70423624,70.70423213,70.41418411,70.41418113,70.41417803,70.41417501,70.41417197,70.41416895,70.41416591,70.41416289,70.41415985,70.41415688,70.41415373,68.88573993,68.88573654,68.88573306,68.8857296,68.88572612,68.88572261,68.8857192,68.88571568,68.88571183,79.66562006,79.66561913,66.36380086,66.36379666,66.36379245,66.36378822,66.36378284,76.33456886,76.33456731,76.33456569,71.65719725,71.65719459,71.65719186,71.65718922,71.65718648,71.65718384,71.65718109,71.65717842,71.65717576,71.65717308,71.65716929,75.5634076,75.5634059,75.56340415,75.56340206,76.33453227,76.33453077,76.33452917,76.33452711,90,75.56339221,75.56339052,75.56338874,75.56338666,90,75.56338454,75.56338281,75.56338109,75.56337897,81.70015727,81.70015674,81.70015609,81.70015556,81.70015492,80.44526762,80.44526682,80.44526601,80.44526528,80.4452645,80.44526344,90,83.0686808,83.06868043,83.06867995,83.25426257,83.25426219,83.25426175,83.2542614,83.25426097,83.2542606,83.25426024,83.25425978,83.25425934,87.46879844,87.46879846,87.46879838,87.46879835,87.46879822,87.46879823,87.46879811,87.46879807,85.09530679,85.09530647,85.09530633,85.09530612,85.0953059,85.0953057,85.09530549,85.09530522,90,90,90,90,90,90,90,90,90,90,92.0886762,92.08867622,92.08867619,92.08867608,92.08867611,92.08867607,92.08867598,92.08867599,92.08867596,92.08867589,96.40275707,96.4027567,96.40275633,91.44080051,91.4408005,91.44080043,91.44080046,91.44080044,91.44080037,91.44080041,91.44080039,91.44080032,91.44080035,91.44080027,91.44080032,91.44080031,91.44080027,91.4408002,91.44080025,91.44080017,91.44080021,91.44080019,91.44080011,91.44080017,91.44080007,91.44080011,91.44080011,91.44080007,91.44080001,91.44080005,91.44079997,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	return test;
}